In this video, you will learn  about the Flask microframework. After watching this video, you will be able to:​ Describe what is a framework and  list popular Python frameworks,​ Create Python web applications  using Flask microframework, Connect to the end points in the  web application through a browser And pass parameters to the  end points that you connect to In Python, a Framework is  a collection of packages or modules which are developed and made  available for a specific purpose. While there are many python frameworks,  the most commonly used Python Frameworks are Flask, Django, Dash, Tornado, Web2Py etc. Microframework is minimalistic  web application framework. While you can create a  bare-minimum web application, they depend on other packages to  have additional functionalities. Flask is an open source extensible  microframework written in Python. Let us look Flask a bit more in detail. Flask, as we saw earlier, is  a Microframework for creating web application quickly and easily with Python. Flask is based on Werkzeug and Jinja2. Werkzeug is a Web Server Gateway interface  toolkit which implements request, response and other web-utility functions and  enables building a web framework on top of it. Jinja2 is a templating engine for python  which helps render dynamic webpages. Flask supports CRUD which is nothing but Create, Read, Update and Delete requests by allowing us to  make POST, PUT, GET, UPDATE and DELETE requests. Flask can serve static files -  The Flask application is set up to look inside a static folder  for HTMLs, CSS and JS assets. Flask web application is extensible –  Though flask by itself is a microframework, it is extensible meaning there are  packages that can be used with flask for other features like user  authentication, data storage, etc. Don’t worry if you are not familiar  with all the terms we just mentioned. They will become clearer as we proceed. What you are seeing on the screen is the  basic structure of a flask application. This is the logo of the flask package. As we saw earlier, Flask web applications  can be used for CRUD operations. Just for better understanding, let’s take an  example of a user management web application. POST and PUT requests are used  for Creating objects or Data. In our user management application example,  you use POST/PUT to create new user. The difference between the two is  that POST creates on every request, whereas PUT creates on the first  request and thereafter updates it. In most web application you will  see POST being used for creation. GET requests are used for  reading the data from the server. In the user management example, we will use  the GET request to read user information. UPDATE requests are used to update  the existing data or objects. DELETE requests are used to delete  the existing data or objects. Most web applications tend  to use POST for Creation, Update and deletion and use GET for read. Flask API end points can be created to  return responses in the form of String, JSON, HTML, Error Object etc.,  along with a response status code. In order to create a web application with flask, we need to first install the flask package using  pip, the standard package manager for python. Like all other packages we can use the command pip install flask which will get the  most current version of flask. Once it is installed, we are all  set to create the web application. We can now import flask package, Instantiate Flask class, Create a web application  and then run the application. We will look at a sample web  application that serves the root API endpoint as a “get” Request and returns  “Hello World!” String as a response. Before we create this application, as we  saw earlier, we need to install flask. As you see, on line 1 we import the  Flask module from the flask package. We create an object of the Flask class as a web application with the name “My first  web application” and store it as app. App is just a reference name and can be anything. But most applications use the  reference name app for clarity purpose. We then define the route and the method that  will be invoked when this route is accessed. You can see that we have not specified  whether it is a “get” or a “post”. When we specify nothing, it is by default “get” and this end point will now  be able to serve get requests to the root. hello is the method which will be invoked when  the API endpoint we just defined is accessed. It takes no parameters and  returns the string “Hello World”. Finally, if __name__ attribute is set to  “__main__”, we run the web application. By default __name__ is set to __main__,  unless it is explicitly changed. We can save and run this like  any other python application. To start the server in development environment, we simply save the code in a python file and  run it like we run any other python application. When the web application server starts, it gives you the IP address and the port  the application can be accessed from. To check the endpoints, we can open  the browser and connect to this end point you see in the server  output: 127.0.0.1 at port 5000, and see the String “Hello World” being  returned from the Web server application. Templates are nothing but pre-created html  pages that are served from the web application. They can be both static and dynamic. By default, the flask application looks  for the templates in a directory called ‘templates’ under the root directory. If these templates need to use images,  styling sheets, or java script files, those are stored in a folder named  static in the root directory. The static pages are rendered as is. The dynamic pages usually have information  that is filled in dynamically for each request. Often these are based on the  values passed as arguments. The arguments can either be passed through  the URL or be passed as request parameters. Let’s look at a sample flask application. We start with importing ‘Flask’ to create  web application, ’Request’ to handle the incoming request and ‘render_template’  for rendering static and dynamic HTMLs. We instantiate Flask and set the static folder. The default is folder name is “static”. But you can have the static  contents in a directory with a different name as long as you set it explicitly. We have defined 3 end points  in this web application. The first is /sample. This will render a static html page. The image in this HTML is sourced  from the static directory. The next one is /user/username where username that  you see within angle brackets is the parameter. If you see the method has  been explicitly set to ‘GET’. This is just to show how you  can set the type of request. If nothing is specified, it is  considered as a “GET” request. The page is rendered with the  parameter we passed in the URL. The last one is /user/username where  username is passed as request parameter. The page is rendered with the  parameter we passed in as request. You will see this in the lab session. In this video you learned: Application frameworks automate the common  tasks associated with building applications, Flask microframework can be  used to create web applications, And Popular Python application frameworks  include Django, Flask, Tornado, and Web2py.